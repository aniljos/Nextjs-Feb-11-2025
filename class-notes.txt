Nextjs session 11th-Feb-2025



Git Url: https://github.com/aniljos/Nextjs-Feb-11-2025
REST API Mock: https://github.com/aniljos/REST-API-Mock

Babel cdn: https://cdnjs.com/libraries/babel-standalone/7.26.3


Use JS Library

1. Download the library(.js) on the machine(library website)
2. Install the library using NPM
3. Use a CDN   

Project Files/Folders

1. package.json: NPM configuration files
			- Dependencies(dev/prod)
			- Scripts
2. node_modules folder: Dependencies folder
3. public folder: All public files accessible from the browser(http)
				-static: images, icons
4. tsconfig.json: Typescript compiler config files
5. eslint.config.mjs: esLint configuration file
6. next.config.ts: Nextjs config
		- customize the React or Nextjs
7. src folder: optional folder with the source code
8. app folder: AppRouter related files reside(Nextjs 13 onwards)
			-layout.tsx: App layout 
			- page.tsx : The page rendered on the root/home route
			
9. pages folder: PagesRouter related files(legacy)


File Names

1. Components(reuseable) - filename(Message.tsx) is the component name(Message).  
2. Components(pages) - filename(page.tsx) and component name can be anything.

Components
	- Design
		- Functional
		- Class
	- Types
		- Client components: Have been around since React first version
				- executed/renderd on the browser
		- Server components: Introduced in React 18
				- executed/renderd on the server
		- Nextjs 13 onwards(App router), server componets are the default
		- Pages router, client components are the default
		
Component Props
	- props is read-only
	
	
Component State
	- Signature of setState
			-setState(updated)
			-setState(callback)  => prev => updated
	- State updates are asynchronous
	- State updates are batched
			count = 5	
			 setCounter(counter + 1); ==> setCounter(6)
			 setCounter(counter + 1); ==> setCounter(6)
			 
			 setCounter(prevCounter => prevCounter + 1); ==> setCounter(invoke the callback(currentCountValue))
			 setCounter(prevCounter => prevCounter + 1); ==> setCounter(invoke the callback(currentCountValue))
			 
			
			
useEffect
	//useEffect(setUp, [list of dependencies]);
	
	mount:
		- useEffect(setUp, []);==> emtpy dependency array
		- The setup is invoked after the first render
		- fetch data from the server(API call)
		- Register for event(window, document)
		- DOM initialization
		
	unmount:
	   - callback returned from the setup of mount
	   - Cancel any API calls
	   - unregister for event(window, document)
	   - cleanup
