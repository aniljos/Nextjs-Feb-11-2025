Nextjs session 11th-Feb-2025



Git Url: https://github.com/aniljos/Nextjs-Feb-11-2025
REST API Mock: https://github.com/aniljos/REST-API-Mock

Babel cdn: https://cdnjs.com/libraries/babel-standalone/7.26.3

Quiz 1: https://forms.gle/LCCoYzsVtHxQWXVu5
Quiz 2: https://forms.gle/ofJoT3RiPAwxPMi88
Quiz 3: https://forms.gle/LxAxdof1rmVrnZ4d7



Use JS Library

1. Download the library(.js) on the machine(library website)
2. Install the library using NPM
3. Use a CDN   

Project Files/Folders

1. package.json: NPM configuration files
			- Dependencies(dev/prod)
			- Scripts
2. node_modules folder: Dependencies folder
3. public folder: All public files accessible from the browser(http)
				-static: images, icons
4. tsconfig.json: Typescript compiler config files
5. eslint.config.mjs: esLint configuration file
6. next.config.ts: Nextjs config
		- customize the React or Nextjs
7. src folder: optional folder with the source code
8. app folder: AppRouter related files reside(Nextjs 13 onwards)
			-layout.tsx: App layout 
			- page.tsx : The page rendered on the root/home route
			
9. pages folder: PagesRouter related files(legacy)


File Names

1. Components(reuseable) - filename(Message.tsx) is the component name(Message).  
2. Components(pages) - filename(page.tsx) and component name can be anything.

Components
	- Design
		- Functional
		- Class
	- Types
		- Client components: Have been around since React first version
				- executed/renderd on the browser
		- Server components: Introduced in React 18
				- executed/renderd on the server
		- Nextjs 13 onwards(App router), server componets are the default
		- Pages router, client components are the default
		
Component Props
	- props is read-only
	- <Counter initialValue={5} /> ==> props.initialValue
	- <MyCOmponent>
			<p>Hello</p>   ==> props.children
	  </MyCOmponent>
	
	
Component State
	- Signature of setState
			-setState(updated)
			-setState(callback)  => prev => updated
	- State updates are asynchronous
	- State updates are batched
			count = 5	
			 setCounter(counter + 1); ==> setCounter(6)
			 setCounter(counter + 1); ==> setCounter(6)
			 
			 setCounter(prevCounter => prevCounter + 1); ==> setCounter(invoke the callback(currentCountValue))
			 setCounter(prevCounter => prevCounter + 1); ==> setCounter(invoke the callback(currentCountValue))
	- State should always be treated as immutable
		- To change the state, create a copy of the state, make chnages to the copy and update the state(with the copy)
			 
			
			
useEffect
	//useEffect(setUp, [list of dependencies]);
	
	mount:
		- useEffect(setUp, []);==> emtpy dependency array
		- The setup is invoked after the first render
		- fetch data from the server(API call)
		- Register for event(window, document)
		- DOM initialization
		
	unmount:
	   - callback returned from the setup of mount
	   - Cancel any API calls
	   - unregister for event(window, document)
	   - cleanup


Application Design & Performnace

1. Smaller Components
		-Easy Develop, Maintain, Test
2. Optimization
		- React.memo : memoized copy(cached) of the component
		- Hooks: useCallback, useMemo
		- Virtual DOM
3. Reuseability
		- Components (reusebale)
		- Higher order components(HOC)
			- function that returns a component
			- Inject a behaviour(props/state) to a component
	    - Custom Hooks
			- A function that uses other hooks(useState, useEffect)

Forms
 - controlled input
		- Reactive
		- Bind the form control to the state and handle on the onChange event
		
		
 - uncontrolled input
		- Non-reactive
		- Get a reference(useRef)- read and write the values with the reference
		
Styles/Class

 - css class: globally/locally(module)
 - inline styles: always be objects(JSX)
 
 
EditProduct assignment
	- Fetch the product data: GET http://localhost:9000/products/[id]
			- Stored in the state(product)
	- Bind the state to the input field(controlled input)
			- product is immutable
	- Save the product : PUT http://localhost:9000/products/[id] {product}
			- navigae back to /products/
	- Cancel 
			- navigae back to /products/
			
React Hooks
	- useEffect
	- useState
	- useRef
	
State management(Client session)

 - localStorage : persistent info on the browser
 - sessionStorage : non-persistent for one session
 
 - In the browser memory 
		- React context, Redux
		
		
Redux
	-Action is an object
		- {type: "save_access_token", token: "abc"}
		- {type: "clear_access_token"}
    -Reducer is a function	
		- receives the actions updates the store
		- one reducer per store
		- design to define multiple reducers and combine it to a single reducer
	-Store
		- One store per application
		
	- library
		- redux
		- react-redux
		- @reduxjs/toolkit
		- npm i @reduxjs/toolkit react-redux 
		
	- react-redux
		-Provider component
		-Hooks	
			- useDispatch: returns a dispatch function
			- useSelector: select/fetch data from the store
			- useStore: return a handle to the store
			
	- Middleware
		-Intercepts  the actions before the reducer process it
		- logging, validation, asynchronous 
		- asynchronous library: redux thunk, redux saga
	-Redux Toolkit
		- Opinionated
		- Implements various design pattern
		-  slices
				- state is treated as mutable
				- create actions creators(helper)
React Context
	- Low level API
	- Mutiple context(store)
	- reading from the context is simpler
		- useContext(similar to the useSelector)
	- updateing the context is more complex(nothin dispatch)
		- we will take care of rerendering the UI
		
		
SSR
 - the page has dynamic props
 - the page uses a dynamic features like headers/cookies 
 - the data fetch disables the cache
 - export const dynamic = 'force-dynamic'
 
Full Stack
 - FE - Next React
 - BE
	 - Any technology(Java. .Net)
	 - JavaScript(Node.js)
		- Express - web applications
		- Next.js API	
			
	
	
		
			
		